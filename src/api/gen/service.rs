// This code was autogenerated with `dbus-codegen-rust -g -i net.connman -m None -c nonblock`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for nonblock::Proxy<'a, C> {

    fn introspect(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait Service {
    fn get_properties(&self) -> nonblock::MethodReply<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>>;
    fn set_property<I1: arg::Arg + arg::Append>(&self, name: &str, value: I1) -> nonblock::MethodReply<()>;
    fn clear_property(&self, name: &str) -> nonblock::MethodReply<()>;
    fn connect(&self) -> nonblock::MethodReply<()>;
    fn disconnect(&self) -> nonblock::MethodReply<()>;
    fn remove(&self) -> nonblock::MethodReply<()>;
    fn move_before(&self, service: dbus::Path) -> nonblock::MethodReply<()>;
    fn move_after(&self, service: dbus::Path) -> nonblock::MethodReply<()>;
    fn reset_counters(&self) -> nonblock::MethodReply<()>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> Service for nonblock::Proxy<'a, C> {

    fn get_properties(&self) -> nonblock::MethodReply<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>> {
        self.method_call("net.connman.Service", "GetProperties", ())
            .and_then(|r: (::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, )| Ok(r.0, ))
    }

    fn set_property<I1: arg::Arg + arg::Append>(&self, name: &str, value: I1) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "SetProperty", (name, arg::Variant(value), ))
    }

    fn clear_property(&self, name: &str) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "ClearProperty", (name, ))
    }

    fn connect(&self) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "Connect", ())
    }

    fn disconnect(&self) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "Disconnect", ())
    }

    fn remove(&self) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "Remove", ())
    }

    fn move_before(&self, service: dbus::Path) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "MoveBefore", (service, ))
    }

    fn move_after(&self, service: dbus::Path) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "MoveAfter", (service, ))
    }

    fn reset_counters(&self) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.Service", "ResetCounters", ())
    }
}

#[derive(Debug)]
pub struct ServicePropertyChanged {
    pub name: String,
    pub value: arg::Variant<Box<dyn arg::RefArg + 'static>>,
}

impl arg::AppendAll for ServicePropertyChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.name, i);
        arg::RefArg::append(&self.value, i);
    }
}

impl arg::ReadAll for ServicePropertyChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ServicePropertyChanged {
            name: i.read()?,
            value: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ServicePropertyChanged {
    const NAME: &'static str = "PropertyChanged";
    const INTERFACE: &'static str = "net.connman.Service";
}
